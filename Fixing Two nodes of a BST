You are given the root of a binary search tree(BST), where exactly two nodes were swapped by mistake. Fix (or correct) the BST by swapping them back. Do not change the structure of the tree.
Note: It is guaranteed that the given input will form BST, except for 2 nodes that will be wrong. All changes must be reflected in the original linked list.
 
Example 1:
Input:
       10
     /    \
    5      8
   / \
  2   20
Output: 1
Explanation:


class TreeNode:
    def __init__(self, value=0, left=None, right=None):
        self.value = value
        self.left = left
        self.right = right

def recoverTree(root):
    def inOrderTraversal(node):
        nonlocal prev, first, second

        if not node:
            return

        # Recursively traverse the left subtree.
        inOrderTraversal(node.left)

        # Check if the current node is smaller than the previous node.
        if prev and node.value < prev.value:
            if not first:
                first = prev  # First swapped node.
            second = node  # Second swapped node.

        prev = node  # Update the previous node.

        # Recursively traverse the right subtree.
        inOrderTraversal(node.right)

    # Initialize variables for the two swapped nodes and the previous node.
    first, second, prev = None, None, None

    # Perform an in-order traversal to identify the swapped nodes.
    inOrderTraversal(root)

    # Swap the values of the two identified nodes to correct the BST.
    first.value, second.value = second.value, first.value

# Utility function to print the tree in-order.
def printInOrder(root):
    if not root:
        return
    printInOrder(root.left)
    print(root.value, end=" ")
    printInOrder(root.right)

# Example usage:
root = TreeNode(10)
root.left = TreeNode(5)
root.right = TreeNode(8)
root.left.left = TreeNode(2)
root.left.right = TreeNode(20)

recoverTree(root)

printInOrder(root)  # Output: 2 5 8 10 20
